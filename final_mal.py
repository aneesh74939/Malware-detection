import pandas as pd
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
data1 = pd.read_csv('DATASET/mal_data1.csv')
dummies=pd.get_dummies(data1.Class)
print (dummies)
merged = pd.concat([data1,dummies],axis='columns')
print (merged)
final=merged.drop(['Class','B'],axis='columns')
final= final.drop("TelephonyManager.getSimCountryIso", axis=1)
print (final)
b=final.S
A=final.drop('S',axis=1)
A_train, A_test, b_train, b_test = train_test_split(A, b,test_size=0.3)
bestfeatures = SelectKBest(score_func=chi2, k=30)
fit = bestfeatures.fit(A_train,b_train)
dfscores = pd.DataFrame(fit.scores_)
dfcolumns = pd.DataFrame(A.columns)
 
featureScores = pd.concat([dfcolumns,dfscores],axis=1)
featureScores.columns = ['Specs','Score']
print ("\n30 Best features:\n")
print(featureScores.nlargest(30,'Score')) 
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn import svm
model1 = DecisionTreeClassifier()
model2 = KNeighborsClassifier()
model3= LogisticRegression()
model4= svm.SVC()
model1.fit(A_train,b_train)
model2.fit(A_train,b_train)
model3.fit(A_train,b_train)
model4.fit(A_train,b_train)
pred1=model1.predict(A_test)
pred2=model2.predict(A_test)
pred3=model3.predict(A_test)
pred4=model4.predict(A_test)
print("\nModel 1 predicted values:\n")
print(pred1)
print("\nModel 2 predicted values:\n")
print(pred2)
print("\nModel 3 predicted values:\n")
print(pred3)
print("\nModel 4 predicted values:\n")
print(pred4)		
from sklearn.metrics import classification_report, confusion_matrix  
print(accuracy_score(b_test,pred2))   
 
print("\nLOGISTIC REGRESSION:\n")
print(confusion_matrix(b_test, pred3))  
print(classification_report(b_test, pred3))  
print("\nLOGISTIC REGRESSION ACCURACY:\n") 
print(accuracy_score(b_test,pred3)) 
print("\nSVM:\n")
print(confusion_matrix(b_test, pred4))  
print(classification_report(b_test, pred4))
print("\nSVM ACCURACY:\n") 
print(accuracy_score(b_test,pred4))    
print("\nDECISION TREE:\n")
print(confusion_matrix(b_test, pred1))  
print(classification_report(b_test, pred1))
print("\nDECISION TREE ACCURACY:\n")
print(accuracy_score(b_test,pred1))   
from sklearn.ensemble import RandomForestClassifier
model= RandomForestClassifier(random_state=1)
model.fit(A_train, b_train)
#model.score(A_test,b_test)
pred=model.predict(A_test)
print("\nRANDOM FOREST:\n")
print(confusion_matrix(b_test, pred))  
print(classification_report(b_test, pred)) 
print("\nRANDOM FOREST ACCURACY:\n") 
print(accuracy_score(b_test,pred))  

